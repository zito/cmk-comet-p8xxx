#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# vim:sta:si:sw=4:sts=4:et:
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Check has been developed using:
# P8510 - Thermometer with Ethernet interface,
#         internal temperature sensor
# Device Firmware Version	P8510 sensor Firmware Version 4-5-1.16
#
# +------------------------------------------------------------------+
# | This file has been contributed by:                               |
# |                                                                  |
# | Václav Ovsík <vaclav.ovsik@gmail.com>             Copyright 2019 |
# +------------------------------------------------------------------+

# Example info:
#   [['Channel 1',
#     '19.9',
#     'Channel 2',
#     'error 1',
#     'Channel 3',
#     'error 1',
#     'Channel 4',
#     'error 1']]
#

def parse_comet_p8xxx(info):
    if len(info) != 1:
        return
    kv = info[0]
    parsed = {}
    for chname, chval in zip(kv[::2], kv[1::2]):
        try:
            id = chname.replace('Channel ', '')
            parsed[id] = float(chval)
        except:
            pass
    return parsed

def inventory_comet_p8xxx(parsed):
    for item in parsed:
        yield item, {}

def check_comet_p8xxx(item, params, parsed):
    if item in parsed:
        return check_temperature(parsed[item], params, "comet_p8xxx_%s" % item)
    else:
        return (3, 'UNKNOWN - Item not found')


check_info['comet_p8xxx'] = {
    'parse_function'          : parse_comet_p8xxx,
    'check_function'          : check_comet_p8xxx,
    'inventory_function'      : inventory_comet_p8xxx,
    'service_description'     : 'Sensor %s',
    'has_perfdata'            : True,
    'snmp_scan_function'      : lambda oid: oid(".1.3.6.1.2.1.1.2.0") == ".1.3.6.1.4.1.1723.2.1.2",
    'snmp_info'		      : ( '.1.3.6.1.4.1.22626.1.5.2', [
        '1.1',    # P8510-MIB::ch1Name
        '1.2',    # P8510-MIB::ch1Val
        '2.1',    # P8510-MIB::ch2Name      badly designed MIB :(
        '2.2',    # P8510-MIB::ch2Val       so we support
        '3.1',    # P8510-MIB::ch3Name      up to 4 channels
        '3.2',    # P8510-MIB::ch3Val       only
        '4.1',    # P8510-MIB::ch4Name
        '4.2',    # P8510-MIB::ch4Val
    ]),
    'group': 'temperature',
    'includes': ["temperature.include"],
    'default_levels_variable': 'comet_p8xxx_default_levels',
}
