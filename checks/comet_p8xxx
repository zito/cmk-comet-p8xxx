#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# vim:sta:si:sw=4:sts=4:et:
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# The Check_MK official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Check has been developed using:
# P8510 - Thermometer with Ethernet interface,
#         internal temperature sensor
# Device Firmware Version	P8510 sensor Firmware Version 4-5-1.16
#
# +------------------------------------------------------------------+
# | This file has been contributed by:                               |
# |                                                                  |
# | Václav Ovsík <vaclav.ovsik@gmail.com>             Copyright 2012 |
# +------------------------------------------------------------------+

# Example info:
#   [['Channel 1',
#     '19.9',
#     'Channel 2',
#     'error 1',
#     'Channel 3',
#     'error 1',
#     'Channel 4',
#     'error 1']]
#

# Default temperature levels [°C]
comet_p8xxx_default_levels = (14, 17, 25, 28)

def inventory_comet_p8xxx(info):
    if len(info) != 1:
        return
    kv = info[0]
    inv = []
    for chname, chval in zip(kv[::2], kv[1::2]):
        try:
            float(chval)
            inv.append((chname, 'comet_p8xxx_default_levels'))
        except:
            pass
    return inv

def check_comet_p8xxx(item, params, info):
    def xstr(x):
        if x is None:
            return ''
        return str(x)
    kv = info[0]
    for chname, chval in zip(kv[::2], kv[1::2]):
        if chname == item:
            chval = savefloat(chval)
            status = 0
            txt = 'Temperature: %.1f°C' % chval
            if params:
                (crit_min, warn_min, warn_max, crit_max) = params
            else:
                crit_min = warn_min = warn_max = crit_max = None
            if crit_min is not None and chval <= crit_min:
                status = 2
                txt += ' (!!) <= %.1f' % crit_min
            elif warn_min is not None and chval <= warn_min:
                status = 1
                txt += ' (!) <= %.1f' % warn_min
            elif crit_max is not None and chval >= crit_max:
                status = 2
                txt += ' (!!) >= %.1f' % crit_max
            elif warn_max is not None and chval >= warn_max:
                status = 1
                txt += ' (!) >= %.1f' % warn_max
            perf = ('temp', chval)
            perf += tuple(map(lambda x: x or None, (
                ':'.join(filter(None, (xstr(warn_min), xstr(warn_max)))),
                ':'.join(filter(None, (xstr(crit_min), xstr(crit_max)))))))
            return (status, {0:'OK', 1:'WARN', 2:'CRIT'}[status]
                    + ' - ' + txt, (perf, ))
    return (3, 'UNKNOWN - Item not found')


check_info['comet_p8xxx'] = (check_comet_p8xxx, "%s",
        1, inventory_comet_p8xxx)

snmp_info['comet_p8xxx'] = ( '.1.3.6.1.4.1.22626.1.5.2', [
        '1.1',    # P8510-MIB::ch1Name
        '1.2',    # P8510-MIB::ch1Val
        '2.1',    # P8510-MIB::ch2Name      badly designed MIB :(
        '2.2',    # P8510-MIB::ch2Val       so we support
        '3.1',    # P8510-MIB::ch3Name      up to 4 channels
        '3.2',    # P8510-MIB::ch3Val       only
        '4.1',    # P8510-MIB::ch4Name
        '4.2',    # P8510-MIB::ch4Val
    ])

snmp_scan_functions['comet_p8xxx'] = \
        lambda oid: oid('.1.3.6.1.4.1.22626.1.5.2.1.1.0')
